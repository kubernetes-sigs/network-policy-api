name: conformance

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: "1.24"
  K8S_VERSION: "v1.33.0"
  KIND_VERSION: "v0.30.0"
  IMAGE_NAME: registry.k8s.io/networking/kube-network-policies
  KIND_CLUSTER_NAME: kind
  NPAPI_VERSION: "v1alpha2"

permissions: write-all

jobs:
  conformance:
    name: conformance
    runs-on: ubuntu-24.04
    timeout-minutes: 100
    strategy:
      fail-fast: false
      matrix:
        ipFamily: ["ipv4", "ipv6"]
    env:
      JOB_NAME: "kube-network-policies-${{ matrix.ipFamily }}"
      IP_FAMILY: ${{ matrix.ipFamily }}
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Enable ipv4 and ipv6 forwarding
      run: |
        sudo sysctl -w net.ipv6.conf.all.forwarding=1
        sudo sysctl -w net.ipv4.ip_forward=1

    - name: Set up environment (download dependencies)
      run: |
        TMP_DIR=$(mktemp -d)
        # kubectl
        curl -L https://dl.k8s.io/${{ env.K8S_VERSION }}/bin/linux/amd64/kubectl -o ${TMP_DIR}/kubectl
        # kind
        curl -Lo ${TMP_DIR}/kind https://kind.sigs.k8s.io/dl/${{ env.KIND_VERSION }}/kind-linux-amd64
        # Install
        sudo cp ${TMP_DIR}/kubectl /usr/local/bin/kubectl
        sudo cp ${TMP_DIR}/kind /usr/local/bin/kind
        sudo chmod +x /usr/local/bin/kubectl /usr/local/bin/kind

    - name: Create multi node cluster
      run: |
        # output_dir
        mkdir -p _artifacts
        # create cluster
        cat <<EOF | /usr/local/bin/kind create cluster \
          --name ${{ env.KIND_CLUSTER_NAME}}           \
          --image kindest/node:${{ env.K8S_VERSION }}  \
          -v7 --wait 1m --retain --config=-
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        networking:
          ipFamily: ${IP_FAMILY}
        nodes:
        - role: control-plane
        - role: worker
        - role: worker
        EOF
        # newer kind version ship a kindnet version that implements network policies.
        # we need to downgrade it to a version that does not support network policies
        # to be able to avoid conflicts with kube-network-policies
        kubectl -n kube-system set image ds kindnet kindnet-cni=docker.io/kindest/kindnetd:v20230809-80a64d96
        # dump the kubeconfig for later
        /usr/local/bin/kind get kubeconfig --name ${{ env.KIND_CLUSTER_NAME}} > _artifacts/kubeconfig.conf

    - name: Install network policy APIs
      run: |
        /usr/local/bin/kubectl apply -f ./config/crd/standard/policy.networking.k8s.io_clusternetworkpolicies.yaml

    - name: Install kube-network-policies from main
      run: |
        TEMP_DIR=$(mktemp -d)
        cleanup() { rm -rf "${TEMP_DIR}"; }
        trap cleanup EXIT INT TERM
        (
          cd $TEMP_DIR
          # Clone the repo
          git clone --depth 1 https://github.com/kubernetes-sigs/kube-network-policies.git
          cd kube-network-policies/
          # Build the image with the network policy API support
          REGISTRY="registry.k8s.io/networking" IMAGE_NAME="kube-network-policies" TAG="test" make image-build-npa-${{ env.NPAPI_VERSION }}
          # Preload the image in the kind cluster
          /usr/local/bin/kind load docker-image registry.k8s.io/networking/kube-network-policies:test-npa-${{ env.NPAPI_VERSION }} --name ${{ env.KIND_CLUSTER_NAME}}
          # Install kube-network-policies with the image built from main
          sed -i s#registry.k8s.io/networking/kube-network-policies.*#registry.k8s.io/networking/kube-network-policies:test-npa-${{ env.NPAPI_VERSION }}# install-cnp.yaml
          /usr/local/bin/kubectl apply -f ./install-cnp.yaml
        )

    - name: Get Cluster status
      run: |
        # wait network is ready
        sleep 5
        /usr/local/bin/kubectl get nodes -o wide
        /usr/local/bin/kubectl get pods -A
        /usr/local/bin/kubectl wait --timeout=1m --for=condition=ready pods --namespace=kube-system -l k8s-app=kube-dns
        /usr/local/bin/kubectl wait --timeout=1m --for=condition=ready pods --namespace=kube-system -l app=kube-network-policies

    - name: Run tests
      run: |
        go mod download
        REPO_VERSION=$(git describe --always --dirty)
        go test  -v ./conformance -run TestConformanceProfiles -args --conformance-profiles=ClusterNetworkPolicy --organization=kubernetes --project=kube-network-policies --url=https://github.com/kubernetes-sigs/kube-network-policies --version=${REPO_VERSION} --contact=https://github.com/kubernetes-sigs/kube-network-policies/issues/new --additional-info=https://github.com/kubernetes-sigs/kube-network-policies

    - name: Upload Junit Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: kind-junit-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: './_artifacts/*.xml'

    - name: Export logs
      if: always()
      run: |
        /usr/local/bin/kind export logs --name ${KIND_CLUSTER_NAME} -v7 ./_artifacts/logs

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: kind-logs-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: ./_artifacts/logs
